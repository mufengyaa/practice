#include<iostream>
using namespace std;

class A
{
public:
	virtual void f() {}
};
class B : public A
{};
void test1() {
	int a = 0;
	double b = static_cast<double>(a);
	//int* pa = static_cast<int*>(a);

	A* pa = new B;
	B* pb = static_cast<B*>(pa);
}
void test2() {
	int a = 0;
	//double b = reinterpret_cast<double>(a);
	int* pa = reinterpret_cast<int*>(a);
}

void modifyValue(int& value) {
	value = 100;
}
class MyClass {
public:
	void nonConstFunction() {}
};
void test3() {
	const int a = 42;
	int& aa = const_cast<int&>(a); // 去除 const 限定符

	const int b = 42;
	modifyValue(const_cast<int&>(b)); // 去除 const 限定符并修改 x 的值
	cout << b << endl;

	const MyClass obj;
	const_cast<MyClass&>(obj).nonConstFunction();
}
void func(A* pa)
{
	// dynamic_cast会先检查是否能转换成功，能成功则转换，不能则返回
	B* pb1 = static_cast<B*>(pa);
	B* pb2 = dynamic_cast<B*>(pa);
	cout << "pb1:" << pb1 << endl;
	cout << "pb2:" << pb2 << endl;
}
void test4() {
	A a;
	B b;
	func(&a);
	func(&b);
}
int main()
{
	test4();
	return 0;
}
