#include<iostream>
#include<vector>

class HeapOnly
{
public:
	static HeapOnly* CreateObject()
	{
		return new HeapOnly;
	}
private:
	// C++98
	// 1.只声明,不实现。因为实现可能会很麻烦，而你本身不需要
	// 2.声明成私有
	HeapOnly() {}
	HeapOnly(const HeapOnly&);
	//// C++11    
	//HeapOnly(const HeapOnly&) = delete;
};

class StackOnly
{
public:
	static StackOnly CreateObject()
	{
		return StackOnly();
	}
private:
	StackOnly() {}
	StackOnly(const StackOnly&);
};
class StackOnly
{
public:
	StackOnly(){}
	StackOnly(const StackOnly& tmp) {}
private:
	//void* operator new(size_t size) = delete;
	void operator delete(void* p) = delete;
	int _a = 1;
};
namespace hungry {
	class Singleton {
	public:
		static Singleton& GetInstance() { //每次调用接口都只返回那一个对象
			return _instance;
		}
		void add(int t) {
			_arr.push_back(t);
		}
		void print() {
			for (auto t : _arr) {
				std::cout << t << " ";
			}
		}
	private:
		Singleton() {}; //注意这里要有函数体(也就是要定义它),因为我们的_instance需要被初始化
		Singleton(const Singleton&);
		Singleton& operator=(const Singleton&);
		static Singleton _instance;
		std::vector<int> _arr;
	};
	Singleton Singleton::_instance;
}
namespace lazy {
	class Singleton {
	public:
		static Singleton& GetInstance() { //每次调用接口都只返回那一个对象
			if (_p==nullptr) {
				//_p = &Singleton(); //如果_p指向普通对象,这里就是右值了,无法取地址
				_p = new Singleton;//所以必须要动态申请,这样的话就需要释放资源了
				//但其实一般单例模式不需要释放,随程序结束就自己释放了
				//但我们可能中途需要释放,那析构函数就没有用了,_p是静态对象,不会在中途自己调用析构
				//所以需要定义一个接口
			}
			return *_p;
		}
		static void DelInstance() { //因为我们的对象是私有的,在外部访问不到,定义成static方便一点
			if (_p) {
				delete _p;//这里会调用析构
				_p = nullptr;
			}
		}
		class func {
		public:
			~func() {
				Singleton::DelInstance();
			}
		};

		void add(int t) {
			_arr.push_back(t);
		}
		void print() {
			for (auto t : _arr) {
				std::cout << t << " ";
			}
		}
	private:
		Singleton() {}; //注意这里要有函数体(也就是要定义它),因为我们的_instance需要被初始化
		Singleton(const Singleton&);
		Singleton& operator=(const Singleton&);
		~Singleton() //vs2019下,静态对象好像不会自动调析构,而是直接释放资源了
		{
			std::cout << "~Singleton()" << std::endl;
			//其他操作
		}

		std::vector<int> _arr;
		static Singleton* _p;
		static func _f;//得是静态的,不然一个对象一个_f,会对_p析构多次
	};
	Singleton* Singleton::_p = nullptr;
	Singleton::func Singleton::_f;
}

void test1() {
	HeapOnly* a = HeapOnly::CreateObject();
}
void test2() {
	StackOnly a = StackOnly();
	//StackOnly* pa = new StackOnly;
}
void test3() {
	hungry::Singleton::GetInstance().add(1); //使用类域调用对象接口,并且用返回值直接调用函数,因为对象是私有的,不能被显式定义
	hungry::Singleton::GetInstance().add(2);
	hungry::Singleton::GetInstance().add(3);
	hungry::Singleton::GetInstance().print();
}
void test4() {
	lazy::Singleton::GetInstance().add(1); //使用类域调用对象接口,并且用返回值直接调用函数,因为对象是私有的,不能被显式定义
	lazy::Singleton::GetInstance().add(2);
	lazy::Singleton::GetInstance().add(3);
	lazy::Singleton::GetInstance().print();
	lazy::Singleton::DelInstance();//显式调用

	lazy::Singleton::GetInstance().add(4);
	lazy::Singleton::GetInstance().print();
}

int main() {
	test1();
	return 0;
}
